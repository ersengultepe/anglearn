import {Component} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {concatMap, delay, of} from 'rxjs';

@Component({
  selector: "app-rxjs-concatmap",
  template: ``,
  standalone: true
})

/**
 * concatMap OperatÃ¶rÃ¼
 * ðŸ“Œ concatMap Nedir?
 * concatMap, RxJS'in bir higher-order mapping operatÃ¶rÃ¼dÃ¼r ve bir kaynaktan gelen deÄŸerleri sÄ±ralÄ± bir ÅŸekilde iÅŸler.
 * Ã–nceki iÅŸlemi tamamlamadan yeni bir iÅŸlemi baÅŸlatmaz.
 * Yani, iÅŸlemler sÄ±rayla gerÃ§ekleÅŸtirilir ve bir Ã¶nceki tamamlanmadan bir sonraki iÅŸleme alÄ±nmaz.
 *
 * ðŸ”¹ Temel KullanÄ±m AlanlarÄ±:
 * HTTP Ä°steklerini sÄ±rayla yapmak (Ã¶rneÄŸin, bir kullanÄ±cÄ±nÄ±n iÅŸlemlerini sÄ±ralÄ± olarak yÃ¼rÃ¼tmek).
 * Asenkron iÅŸlemleri sÄ±ralÄ± hale getirmek (Ã¶rneÄŸin, birden fazla API Ã§aÄŸrÄ±sÄ±nÄ± belirli bir sÄ±rayla gerÃ§ekleÅŸtirmek).
 * VeritabanÄ± iÅŸlemlerini sÄ±rayla iÅŸlemek (Ã¶rneÄŸin, bir kayÄ±t tamamlanmadan diÄŸerine geÃ§memek).
 * ðŸ“Œ NasÄ±l Ã‡alÄ±ÅŸÄ±r?
 * concatMap, her bir kaynak Observable'dan gelen deÄŸeri alÄ±r ve onu bir iÃ§ Observable'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
 * Ä°Ã§ Observable tamamlanmadan bir sonraki deÄŸeri iÅŸlemez.
 */
export class ConcatmapComponent{
  constructor(private http:HttpClient) {
    this.sequentialOperations();
    this.sequentialProcess()
  }

  private sequentialOperations() {
    const userIds = [1, 2, 3, 4, 5]

    of(...userIds).pipe(
      concatMap(userId => this.http.get(`https://jsonplaceholder.typicode.com/users/${userId}`))
    ).subscribe(user => console.log("kullanÄ±cÄ±", user));
  }

  private sequentialProcess(){
    of("Ä°ÅŸlem 1", "Ä°ÅŸlem 2", "Ä°ÅŸlem 3").pipe(
      concatMap(task => of(`${task} tamamlandÄ±`).pipe(delay(1000)))
    ).subscribe(result => console.log(result))
  }
}
