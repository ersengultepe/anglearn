import {Component, OnInit} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {forkJoin, from, mergeMap, of} from 'rxjs';

@Component({
  selector: "app-rxjs-mergemap",
  template: ``,
  standalone: true
})

/**
 * üöÄ RxJS mergeMap Operat√∂r√º
 *
 * üîπ mergeMap, gelen her deƒüere kar≈üƒ±lƒ±k yeni bir observable a√ßar ve bu observable‚Äôlarƒ± paralel (aynƒ± anda) √ßalƒ±≈ütƒ±rƒ±r.
 * üîπ Hi√ßbir i≈ülemi iptal etmez‚Äî√∂nceki i≈ülemler devam ederken yenileri de ba≈ülar.
 * üîπ √ñzellikle baƒüƒ±msƒ±z API istekleri ve paralel i≈ülemler i√ßin kullanƒ±lƒ±r.
 *
 * üìå mergeMap Ne Zaman Kullanƒ±lƒ±r?
 *
 * ‚úÖ Aynƒ± anda birden fazla HTTP isteƒüi yapmak i√ßin
 * ‚úÖ B√ºy√ºk veri k√ºmeleriyle √ßalƒ±≈üƒ±rken performansƒ± artƒ±rmak i√ßin
 * ‚úÖ Ger√ßek zamanlƒ± olaylarƒ± e≈üzamanlƒ± olarak i≈ülemek i√ßin
 */
export class MergemapComponent implements OnInit{
  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.getUsers();
    this.getUserPostsAndComments()
  }

  private getUsers() {
    const userIds = [1, 2, 3];

    from(userIds) //From: Dizinin her elemanƒ±nƒ± ayrƒ± ayrƒ± yayar. 1, 2 ve 3 sƒ±rayla gelir.
      .pipe(
        mergeMap(id => this.http.get(`https://jsonplaceholder.typicode.com/users/${id}`))
      )
      .subscribe(
        user => console.log('Kullanƒ±cƒ±:', user)
      );
  }

  private getUserPostsAndComments(){
    of(1).pipe(
      mergeMap(userId =>
        forkJoin({ // T√ºm API √ßaƒürƒ±larƒ± tamamlanƒ±nca sonu√ß d√∂nd√ºr√ºr. B√ºt√ºn verileri bir nesne i√ßinde d√∂nd√ºr√ºr
          user: this.http.get(`https://jsonplaceholder.typicode.com/users/${userId}`),
          posts: this.http.get(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`)
        })
      )
    ).subscribe(result => console.log('Sonu√ß:', result));
  }
}
